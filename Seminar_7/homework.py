# Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод:  
                                
values = [0, 2, 10, 6] 

def same_by(characteristic, objects):   
    if len(objects) == len(list(filter(characteristic, objects))):
        return True
    else:
        return False

if same_by(lambda x: x % 2 == 0, values):
    print('same')
else:
    print('different')

# Вывод: 
# same

# Задача 1.
# Напишите функцию print_operation_table(operation, num_rows, num_columns), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца.
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
# Если строк меньше двух, выдайте текст
# ОШИБКА! Размерности таблицы должны быть больше 2!.

# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.

# На входе:

# print_operation_table(lambda x, y: x * y, 3, 3)

# На выходе:

# 1 2 3
# 2 4 6 
# 3 6 9

def print_operation_table(operation, num_rows = 9, num_columns = 9):
    if num_rows < 2 or num_columns < 2:
        print("ОШИБКА! Размерности таблицы должны быть больше 2!")
    else:
        columns = [i for i in range(1, num_columns + 1)] 
        print(*columns)
        for i in range(2, num_rows + 1):
            list_1 = [i]
            for j in range(2, num_columns + 1):
                list_1.append(operation(i, j))
            print(*list_1)

print_operation_table(lambda x, y: x * y, 5, 5)

# Задача 2.
# Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу.

# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
# Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами.
# Фразы отделяются друг от друга пробелами.

# Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka в виде строки. 
# В ответе напишите Парам пам-пам, если с ритмом все в порядке и Пам парам, если с ритмом все не в порядке.
# Если фраза только одна, то ритм определить не получится и необходимо вывести: 
# Количество фраз должно быть больше одной!.

# Пример

# На входе:
# stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'

# На выходе:
# Парам пам-пам

stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
list_1 = stroka.split()
glasnie = 'ёуеыаоэяию'
list_2 = list()

for i in list_1:
    x = 0
    for j in glasnie:
        x += i.count(j)
    list_2.append(x) 

if len(list_1) < 2:
    print("Количество фраз должно быть больше одной!")
elif len(list_2) == len(list(filter(lambda x: x % max(list_2) == 0, list_2))):
    print("Парам пам-пам")
else:
    print("Пам парам")

# или

# vowels = ['а', 'е', 'ё', 'и', 'й', 'о', 'у', 'ы', 'э', 'ю', 'я']
# phrases = stroka.split()
# if len(phrases) < 2:
#  print('Количество фраз должно быть больше одной!')
# else:
#  countVowels = []

#  for i in phrases:
#   countVowels.append(len([x for x in i if x.lower() in vowels]))

#  if countVowels.count(countVowels[0]) == len(countVowels):
#   print('Парам пам-пам')
#  else:
#   print('Пам парам')